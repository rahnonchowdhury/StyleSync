You are going to generate my entire full-stack project into a proper GitHub-ready repository.  
This project is a **video style transfer web app** using:  

- **Frontend**: React + TypeScript + TanStack Query  
- **Backend**: Node.js + Express.js + Drizzle ORM + PostgreSQL  
- **Python Service**: Python + FFmpeg for video style transfer  
- **Database**: PostgreSQL (schema managed with Drizzle ORM)

Here is what I need from you:  

### 1. Project Structure  
Organize everything into the following structure:  

/video-style-transfer-app  
│  
├── backend/  
│   ├── src/  
│   │   ├── index.ts            # Express.js entry  
│   │   ├── routes/             # API routes (upload, job status, results)  
│   │   ├── db/                 # Drizzle ORM schema + migrations  
│   │   └── services/           # Python process handler + job manager  
│   ├── package.json  
│   ├── tsconfig.json  
│   └── .env.example            # Environment variables (DB_URL, PYTHON_PATH, etc.)  
│  
├── frontend/  
│   ├── src/  
│   │   ├── components/  
│   │   ├── pages/  
│   │   ├── api/  
│   │   └── App.tsx  
│   ├── package.json  
│   ├── tsconfig.json  
│   └── vite.config.ts  
│  
├── python/  
│   ├── style_transfer.py       # Core video processing logic with FFmpeg  
│   ├── requirements.txt        # Python dependencies  
│  
├── .gitignore                  # Ignore node_modules, venv, build artifacts  
├── README.md                   # Clear setup + usage instructions  
└── LICENSE (optional)

### 2. Boilerplate Files
- **README.md** should include:
  - Project description (what it does, tech stack)  
  - How to install/run backend, frontend, and Python service  
  - Example workflow (upload video → processing → status updates → results)  
  - How job tracking works with Drizzle ORM + TanStack Query  
- **.gitignore** should ignore:  
  - `node_modules/`, `dist/`, `.env`, `__pycache__/`, `*.pyc`, `.DS_Store`  

### 3. Explanation
After generating all code, explain:  
1. Which files belong to which layer (frontend, backend, python).  
2. How these files work together.  
3. How the repo structure follows **best practice for GitHub projects**.  

### 4. GitHub Instructions
Finally, explain to me step-by-step how I can push this to GitHub using VS Code terminal:  
1. `git init`  
2. `git add .`  
3. `git commit -m "Initial commit"`  
4. `git branch -M main`  
5. `git remote add origin <my-repo-url>`  
6. `git push -u origin main`

---

**Output format**:  
- Generate the **actual code files** in the right folders.  
- Then write a clear explanation of the repo organization.  
- Then give me the GitHub push instructions.
